# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Transfer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, project_id: str=None, user: str=None, _pass: str=None):  # noqa: E501
        """Transfer - a model defined in Swagger

        :param project_id: The project_id of this Transfer.  # noqa: E501
        :type project_id: str
        :param user: The user of this Transfer.  # noqa: E501
        :type user: str
        :param _pass: The _pass of this Transfer.  # noqa: E501
        :type _pass: str
        """
        self.swagger_types = {
            'project_id': str,
            'user': str,
            '_pass': str
        }

        self.attribute_map = {
            'project_id': 'project_id',
            'user': 'user',
            '_pass': 'pass'
        }

        self._project_id = project_id
        self._user = user
        self.__pass = _pass

    @classmethod
    def from_dict(cls, dikt) -> 'Transfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transfer of this Transfer.  # noqa: E501
        :rtype: Transfer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self) -> str:
        """Gets the project_id of this Transfer.


        :return: The project_id of this Transfer.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """Sets the project_id of this Transfer.


        :param project_id: The project_id of this Transfer.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def user(self) -> str:
        """Gets the user of this Transfer.


        :return: The user of this Transfer.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this Transfer.


        :param user: The user of this Transfer.
        :type user: str
        """

        self._user = user

    @property
    def _pass(self) -> str:
        """Gets the _pass of this Transfer.


        :return: The _pass of this Transfer.
        :rtype: str
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass: str):
        """Sets the _pass of this Transfer.


        :param _pass: The _pass of this Transfer.
        :type _pass: str
        """

        self.__pass = _pass
